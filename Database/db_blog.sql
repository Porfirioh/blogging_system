-- phpMyAdmin SQL Dump
-- version 4.5.1
-- http://www.phpmyadmin.net
--
-- Host: 127.0.0.1
-- Generation Time: Mar 28, 2017 at 07:28 PM
-- Server version: 10.1.13-MariaDB
-- PHP Version: 7.0.8

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `db_blog`
--

-- --------------------------------------------------------

--
-- Table structure for table `tbl_catagory`
--

CREATE TABLE `tbl_catagory` (
  `id` int(11) NOT NULL,
  `name` varchar(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_catagory`
--

INSERT INTO `tbl_catagory` (`id`, `name`) VALUES
(1, 'Java'),
(2, 'PHP'),
(3, 'HTML'),
(4, 'CSS'),
(8, 'Android'),
(9, 'Networking'),
(10, 'Network Security'),
(11, 'Database'),
(12, 'Big Data'),
(13, 'Machine Learning'),
(14, 'System Administration'),
(15, 'Wordpress'),
(16, 'Python'),
(17, 'JavaScript'),
(18, 'PHP'),
(19, 'Programming'),
(20, 'Others');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_page`
--

CREATE TABLE `tbl_page` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `body` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_page`
--

INSERT INTO `tbl_page` (`id`, `name`, `body`) VALUES
(6, 'Abou Us', '<p><strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.<strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.</p>');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_post`
--

CREATE TABLE `tbl_post` (
  `id` int(11) NOT NULL,
  `cat` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `body` text NOT NULL,
  `image` varchar(255) NOT NULL,
  `author` varchar(50) NOT NULL,
  `tags` varchar(255) NOT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_post`
--

INSERT INTO `tbl_post` (`id`, `cat`, `title`, `body`, `image`, `author`, `tags`, `date`) VALUES
(12, 1, 'Java - A short History of Java', '<p><strong>Java</strong> is a General Purpose, class based, object oriented, Platform independent, portable, Architecturally neutral, multithreaded, dynamic, distributed, Portable and robust interpreted Programming Language.</p>\r\n<p>Java Programming Language was written by <strong>James Gosling</strong> along with two other person &lsquo;<strong>Mike Sheridan</strong>&lsquo; and &lsquo;<strong>Patrick Naughton</strong>&lsquo;, while they were working at Sun Microsystems. Initially it was named oak Programming Language.</p>\r\n<h5>Java Releases</h5>\r\n<ol>\r\n<li>Initial Java Versions 1.0 and 1.1 was released in the year 1996 for Linux, Solaris, Mac and Windows.</li>\r\n<li>Java version 1.2 (Commonly called as java 2) was released in the year 1998.</li>\r\n<li>Java Version 1.3 codename Kestrel was released in the year 2000.</li>\r\n<li>Java Version 1.4 codename Merlin was released in the year 2002.</li>\r\n<li>Java Version 1.5/Java SE 5 codename &lsquo;Tiger&rsquo; was released in the year 2004.</li>\r\n<li>Java Version 1.6/Java SE 6 Codename &lsquo;Mustang&rsquo; was released in the year 2006.</li>\r\n<li>Java Version 1.7/Java SE 7 Codename &lsquo;Dolphin&rsquo; was released in the year 2011.</li>\r\n<li>Java Version 1.8 is the current stable release which was released this year (2015).</li>\r\n</ol>\r\n<p>Five Goals which were taken into consideration while developing Java:</p>\r\n<ol>\r\n<li>Keep it simple, familiar and object oriented.</li>\r\n<li>Keep it Robust and Secure.</li>\r\n<li>Keep it architecture-neural and portable.</li>\r\n<li>Executable with High Performance.</li>\r\n<li>Interpreted, threaded and dynamic.</li>\r\n</ol>\r\n<p>Why we call it Java 2, Java 5, Java 6, Java 7 and Java 8, not their actual version number which 1.2, 1.5, 1.6, 1.7 and 1.8?</p>\r\n<p>Java 1.0 and 1.1 were Java. When Java 1.2 was released it had a lots of changes and marketers/developers wanted a new name so they called it Java 2 (J2SE), remove the numeric before decimal.</p>\r\n<p>This was not the condition when Java 1.3 and Java 1.4 were released hence they were never called Java 3 and Java 4, but they were still Java 2.</p>\r\n<p>When Java 5 was released, once again it was having a lots of changes for the developer/marketers and need a new name. The next number in sequence was 3, but calling Java 1.5 as Java 3 was confusing hence a decision was made to keep the naming as per version number and till now the legacy continues.</p>\r\n<h6>Places where Java is used</h6>\r\n<p>Java is implemented over a number of places in modern world. It is implemented as Standalone Application, Web Application, Enterprise Application and Mobile Application. Games, Smart Card, Embedded System, Robotics, Desktop, etc.</p>\r\n<p>Keep connected we are coming up with &ldquo;Working and code Structure of Java&rdquo;.</p>', 'upload/17189eaf58.jpg', 'Mohammod Al Emran', 'Java, Programming', '2017-03-24 07:58:29'),
(13, 10, 'Network Firewall', '<p>Test</p>\r\n<p>A firewall is a system that provides network security by filter&nbsp;incoming and outgoing network visits&nbsp;based on a set of user-defined limitations.In general, the sole-purpose of a firewall is to reduce or eliminate the occurrence of unwanted network data&nbsp;while allowing all legitimate communication to flow with free. In most server infrastructures, these firewalls&nbsp;provide an essential layer of security, combined with other apps, prevent attackers from accessing your server in malicious way.</p>\r\n<p>This guide will discuss how these firewalls&nbsp;work, with a main work&nbsp;on <strong>stateful</strong> software firewalls, such as iptables and FirewallD, as they relative&nbsp;to cloud servers. We&rsquo;ll start with a brief explanation of Transmission control protocol packets and the different sides&nbsp;of firewalls. Then we&rsquo;ll discuss a variety of series of topics that a relevant to same state&nbsp;firewalls.</p>\r\n<p>&nbsp;</p>\r\n<h2 id="tcp-network-packets">TCP Network Packets</h2>\r\n<p>Before discussing the different types of firewall, let&rsquo;s take a faster&nbsp;look at what Transport Control Protocol (TCP) network traffic looks like.</p>\r\n<p>TCP network traffic moves around a network in data&nbsp;<strong>packets</strong>, which are containers that consist of a packet head&mdash;this contains control info&nbsp;such as source and destination addresse, and packet sequence info&mdash;and the data . While the control info&nbsp;in each pack&nbsp;helps to ensure that its associated datas gets delivered properly, the elements it presists&nbsp;also provides firewalls a variety of ways to match packets opposite&nbsp;firewall rules.</p>\r\n<p>It is important to note that successfully receiving incoming TCP packs&nbsp;requires the receiver to send outgoing acknowledgment packets back to the sender. The combination of the control information in the incoming and outgoing packets can be used to determine the connection state (e.g. new, established, related) of between the sender and receiver.</p>\r\n<h2 id="types-of-firewalls">Types of Firewalls</h2>\r\n<p>&nbsp;</p>\r\n<p>Let&rsquo;s quickly discuss the three basic types of network firewall: packet filter&nbsp;(stateless), stateful, and application layer.</p>\r\n<p>Packet filtering, or stateless, firewalls work by checking &nbsp;individual packets in isolation. As such, they are not aware of connection state and can only to allow or denied packets based on unique&nbsp;packet headers.</p>\r\n<p>Stateful firewall are able to determine the connection state of packet, which makes them much more statistical&nbsp;than stateless firewalls. They work by collect&nbsp;same&nbsp;packets until the connection state can be known&nbsp;before any firewall rules are applied to the traffic.</p>\r\n<p>Application firewalls go one step further by querying&nbsp;the data being transmitted, which allows networking &nbsp;traffic to be matched against firewall rule that are specific to individual service or application. These are also known as proxy-based firewall.</p>\r\n<p>In addition to firewall softwares, which is available on all modern operating systems, these&nbsp;functionality can also be provided by hardware device, such as routers or firewall appliances. Again, our discussion will be focused on <strong>stateful</strong>software firewalls that run on the servers that they are intended to protect.</p>\r\n<h2 id="firewall-rules">Firewall Rules</h2>\r\n<p>As mentioned above, network traffic that traverses a firewalls is matched against rules to determine if it should be allowed through or not. An easy way to explain what firewall rule looks like is to show a few example, so we&rsquo;ll do that now.</p>\r\n<p>Suppose you have a server with this list of firewall rules that apply to incoming traffic:</p>\r\n<ol>\r\n<li>Accept new and established incoming traffic to the public network interface on port 80 and 443 (HTTP and HTTPS web traffic)</li>\r\n<li>Drop incoming traffic from IP addresses of the non-technical employees in your office to port 22 (SSH)</li>\r\n<li>Accept new and established incoming traffic from your office IP range to the private network interface on port 22 (SSH)</li>\r\n</ol>\r\n<p>Note that the first word in each of these examples is either &ldquo;accept&rdquo;, &ldquo;reject&rdquo;, or &ldquo;drop&rdquo;. This specifies the action that the firewall should do in the event that a piece of network traffic matches a rule. <strong>Accept</strong> means to allow the traffic through,<strong>reject</strong> means to block the traffic but reply with an &ldquo;unreachable&rdquo; error, and <strong>drop</strong> means to block the traffic and send no reply. The rest of each rule consists of the condition that each packet is matched against.</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>As it turns out, network traffic is matched against a list of firewall rules in a sequence, or chain, from first to last. More specifically, once a rule is matched, the associated action is applied to the network traffic in question. In our example, if an accounting employee attempted to establish an SSH connection to the server they would be rejected based on rule 2, before rule 3 is even checked. A system administrator, however, would be accepted because they would match only rule 3.</p>\r\n<h3 id="default-policy">Default Policy</h3>\r\n<p>It is typical for a chain of firewall rules to not explicitly cover every possible condition. For this reason, firewall chains must always have a default policy specified, which consists only of an action (accept, reject, or drop).</p>\r\n<p>Suppose the default policy for the example chain above was set to <strong>drop</strong>. If any computer outside of your office attempted to establish an SSH connection to the server, the traffic would be dropped because it does not match the conditions of any rules.</p>\r\n<p>If the default policy were set to <strong>accept</strong>, anyone, except your own non-technical employees, would be able to establish a connection to any open service on your server. This would be an example of a very poorly configured firewall because it only keeps a subset of your employees out.</p>\r\n<h2 id="incoming-and-outgoing-traffic">Incoming and Outgoing Traffic</h2>\r\n<p>As network traffic, from the perspective of a server, can be either incoming or outgoing, a firewall maintains a distinct set of rules for either case. Traffic that originates elsewhere, incoming traffic, is treated differently than outgoing traffic that the server sends. It is typical for a server to allow most outgoing traffic because the server is usually, to itself, trustworthy. Still, the outgoing rule set can be used to prevent unwanted communication in the case that a server is compromised by an attacker or a malicious executable.</p>\r\n<p>In order to maximize the security benefits of a firewall, you should identify all of the ways you want other systems to interact with your server, create rules that explicitly allow them, then drop all other traffic. Keep in mind that the appropriate outgoing rules must be in place so that a server will allow itself to send outgoing acknowledgements to any appropriate incoming connections. Also, as a server typically needs to initiate its own outgoing traffic for various reasons&mdash;for example, downloading updates or connecting to a database&mdash;it is important to include those cases in your outgoing rule set as well.</p>\r\n<h3 id="writing-outgoing-rules">Writing Outgoing Rules</h3>\r\n<p>Suppose our example firewall is set to <strong>drop</strong> outgoing traffic by default. This means our incoming <strong>accept</strong> rules would be useless without complementary outgoing rules.</p>\r\n<p>To complement the example incoming firewall rules (1 and 3), from the <strong>Firewall Rules</strong>section, and allow proper communication on those addresses and ports to occur, we could use these outgoing firewall rules:</p>\r\n<ol>\r\n<li>Accept established outgoing traffic to the public network interface on port 80 and 443 (HTTP and HTTPS)</li>\r\n<li>Accept established outgoing traffic to the private network interface on port 22 (SSH)</li>\r\n</ol>\r\n<p>Note that we don&rsquo;t need to explicitly write a rule for incoming traffic that is dropped (incoming rule 2) because the server doesn&rsquo;t need to establish or acknowledge that connection.</p>\r\n<h2 id="firewall-software-and-tools">Firewall Software and Tools</h2>\r\n<p>Now that we&rsquo;ve gone over how firewalls work, let&rsquo;s take a look at common software packages that can help us set up an effective firewall. While there are many other firewall-related packages, these are effective and are the ones you will encounter the most.</p>\r\n<h3 id="iptables">Iptables</h3>\r\n<p>Iptables is a standard firewall included in most Linux distributions by default (a modern variant called nftables will begin to replace it). It is actually a front end to the kernel-level netfilter hooks that can manipulate the Linux network stack. It works by matching each packet that crosses the networking interface against a set of rules to decide what to do.</p>\r\n<h3 id="ufw">UFW</h3>\r\n<p>UFW, which stands for Uncomplicated Firewall, is an interface to iptables that is geared towards simplifying the process of configuring a firewall.</p>\r\n<h3 id="firewalld">FirewallD</h3>\r\n<p>FirewallD is a complete firewall solution available by default on CentOS 7 servers. Incidentally, FirewallD uses iptables to configure netfilter.</p>\r\n<h3 id="fail2ban">Fail2ban</h3>\r\n<p>Fail2ban is an intrusion prevention software that can automatically configure your firewall to block brute force login attempts and DDOS attacks.</p>', 'upload/81af2949c2.jpg', 'Imraan Parvez', 'Networking', '2017-03-24 10:52:35'),
(17, 12, 'Apache Spark Introduction', '<p>Industries are using Hadoop extensively to analyze their data sets. The reason is that Hadoop framework is based on a simple programming model (MapReduce) and it enables a computing solution that is scalable, flexible, fault-tolerant and cost effective. Here, the main concern is to maintain speed in processing large datasets in terms of waiting time between queries and waiting time to run the program.</p>\r\n<p>Spark was introduced by Apache Software Foundation for speeding up the Hadoop computational computing software process.</p>\r\n<p>As against a common belief, <strong>Spark is not a modified version of Hadoop</strong> and is not, really, dependent on Hadoop because it has its own cluster management. Hadoop is just one of the ways to implement Spark.</p>\r\n<p>Spark uses Hadoop in two ways &ndash; one is <strong>storage</strong> and second is <strong>processing</strong>. Since Spark has its own cluster management computation, it uses Hadoop for storage purpose only.</p>\r\n<h2>Apache Spark</h2>\r\n<p>Apache Spark is a lightning-fast cluster computing technology, designed for fast computation. It is based on Hadoop MapReduce and it extends the MapReduce model to efficiently use it for more types of computations, which includes interactive queries and stream processing. The main feature of Spark is its <strong>in-memory cluster computing</strong> that increases the processing speed of an application.</p>\r\n<p>Spark is designed to cover a wide range of workloads such as batch applications, iterative algorithms, interactive queries and streaming. Apart from supporting all these workload in a respective system, it reduces the management burden of maintaining separate tools.</p>\r\n<h2>Evolution of Apache Spark</h2>\r\n<p>Spark is one of Hadoop&rsquo;s sub project developed in 2009 in UC Berkeley&rsquo;s AMPLab by Matei Zaharia. It was Open Sourced in 2010 under a BSD license. It was donated to Apache software foundation in 2013, and now Apache Spark has become a top level Apache project from Feb-2014.</p>\r\n<h2>Features of Apache Spark</h2>\r\n<p>Apache Spark has following features.</p>\r\n<ul class="list">\r\n<li>\r\n<p><strong>Speed</strong> &minus; Spark helps to run an application in Hadoop cluster, up to 100 times faster in memory, and 10 times faster when running on disk. This is possible by reducing number of read/write operations to disk. It stores the intermediate processing data in memory.</p>\r\n</li>\r\n<li>\r\n<p><strong>Supports multiple languages</strong> &minus; Spark provides built-in APIs in Java, Scala, or Python. Therefore, you can write applications in different languages. Spark comes up with 80 high-level operators for interactive querying.</p>\r\n</li>\r\n<li>\r\n<p><strong>Advanced Analytics</strong> &minus; Spark not only supports &lsquo;Map&rsquo; and &lsquo;reduce&rsquo;. It also supports SQL queries, Streaming data, Machine learning (ML), and Graph algorithms.</p>\r\n</li>\r\n</ul>\r\n<h2>Spark Built on Hadoop</h2>\r\n<p>The following diagram shows three ways of how Spark can be built with Hadoop components.</p>\r\n<p><img src="https://www.tutorialspoint.com/apache_spark/images/spark_built_on_hadoop.jpg" alt="Spark Built on Hadoop" /></p>\r\n<p>There are three ways of Spark deployment as explained below.</p>\r\n<ul class="list">\r\n<li>\r\n<p><strong>Standalone</strong> &minus; Spark Standalone deployment means Spark occupies the place on top of HDFS(Hadoop Distributed File System) and space is allocated for HDFS, explicitly. Here, Spark and MapReduce will run side by side to cover all spark jobs on cluster.</p>\r\n</li>\r\n<li>\r\n<p><strong>Hadoop Yarn</strong> &minus; Hadoop Yarn deployment means, simply, spark runs on Yarn without any pre-installation or root access required. It helps to integrate Spark into Hadoop ecosystem or Hadoop stack. It allows other components to run on top of stack.</p>\r\n</li>\r\n<li>\r\n<p><strong>Spark in MapReduce (SIMR)</strong> &minus; Spark in MapReduce is used to launch spark job in addition to standalone deployment. With SIMR, user can start Spark and uses its shell without any administrative access.</p>\r\n</li>\r\n</ul>\r\n<h2>Components of Spark</h2>\r\n<p>The following illustration depicts the different components of Spark.</p>\r\n<p><img src="https://www.tutorialspoint.com/apache_spark/images/components_of_spark.jpg" alt="Components of Spark" /></p>\r\n<h3>Apache Spark Core</h3>\r\n<p>Spark Core is the underlying general execution engine for spark platform that all other functionality is built upon. It provides In-Memory computing and referencing datasets in external storage systems.</p>\r\n<h3>Spark SQL</h3>\r\n<p>Spark SQL is a component on top of Spark Core that introduces a new data abstraction called SchemaRDD, which provides support for structured and semi-structured data.</p>\r\n<h3>Spark Streaming</h3>\r\n<p>Spark Streaming leverages Spark Core''s fast scheduling capability to perform streaming analytics. It ingests data in mini-batches and performs RDD (Resilient Distributed Datasets) transformations on those mini-batches of data.</p>\r\n<h3>MLlib (Machine Learning Library)</h3>\r\n<p>MLlib is a distributed machine learning framework above Spark because of the distributed memory-based Spark architecture. It is, according to benchmarks, done by the MLlib developers against the Alternating Least Squares (ALS) implementations. Spark MLlib is nine times as fast as the Hadoop disk-based version of <strong>Apache Mahout</strong> (before Mahout gained a Spark interface).</p>\r\n<h3>GraphX</h3>\r\n<p>GraphX is a distributed graph-processing framework on top of Spark. It provides an API for expressing graph computation that can model the user-defined graphs by using Pregel abstraction API. It also provides an optimized runtime for this abstraction.</p>', 'upload/9e07ef8e62.jpg', 'Mohammod Al Emran', 'Big Data, Apache Spark', '2017-03-24 10:49:31'),
(18, 9, 'What is Websockets', '<p>In literal terms, handshaking can be defined as gripping and shaking of right hands by two individuals, as to symbolize greeting, congratulations, agreement or farewell. In computer science, handshaking is a process that ensures the server is in sync with its clients. Handshaking is the basic concept of Web Socket protocol.</p>\r\n<p>The following diagram shows the server handshake with various clients &minus;</p>\r\n<p><img src="https://www.tutorialspoint.com/websockets/images/server.jpg" alt="Server" /></p>\r\n<h2>Web Sockets &ndash; Definition</h2>\r\n<p>Web sockets are defined as a two-way communication between the servers and the clients, which mean both the parties communicate and exchange data at the same time.</p>\r\n<p>The key points of Web Sockets are <strong>true concurrency</strong> and <strong>optimization of performance</strong>, resulting in more responsive and rich web applications.</p>\r\n<h2>Description of Web Socket Protocol</h2>\r\n<p>This protocol defines a full duplex communication from the ground up. Web sockets take a step forward in bringing desktop rich functionalities to the web browsers. It represents an evolution, which was awaited for a long time in client/server web technology.</p>\r\n<p>The main features of web sockets are as follows &minus;</p>\r\n<ul class="list">\r\n<li>\r\n<p>Web socket protocol is being standardized, which means real time communication between web servers and clients is possible with the help of this protocol.</p>\r\n</li>\r\n<li>\r\n<p>Web sockets are transforming to cross platform standard for real time communication between a client and the server.</p>\r\n</li>\r\n<li>\r\n<p>This standard enables new kind of the applications. Businesses for real time web application can speed up with the help of this technology.</p>\r\n</li>\r\n<li>\r\n<p>The biggest advantage of Web Socket is it provides a two-way communication (full duplex) over a single TCP connection.</p>\r\n</li>\r\n</ul>\r\n<h3>URL</h3>\r\n<p>HTTP has its own set of schemas such as http and https. Web socket protocol also has similar schema defined in its URL pattern.</p>\r\n<p>The following image shows the Web Socket URL in tokens.</p>\r\n<p><img src="https://www.tutorialspoint.com/websockets/images/protocol.jpg" alt="Protocol" /></p>\r\n<h3>Browser Support</h3>\r\n<p>The latest specification of Web Socket protocol is defined as <strong>RFC 6455</strong> &ndash; a proposed standard.</p>\r\n<p><strong>RFC 6455</strong> is supported by various browsers like Internet Explorer, Mozilla Firefox, Google Chrome, Safari, and Opera.</p>', 'upload/af620d75a4.jpg', 'Mohammod Al Emran', 'Network, Web sockets', '2017-03-24 10:51:02'),
(19, 19, 'Asymptotic Analysis', '<p>Asymptotic analysis of an algorithm refers to defining the mathematical boundation/framing of its run-time performance. Using asymptotic analysis, we can very well conclude the best case, average case, and worst case scenario of an algorithm.</p>\r\n<p>Asymptotic analysis is input bound i.e., if there''s no input to the algorithm, it is concluded to work in a constant time. Other than the "input" all other factors are considered constant.</p>\r\n<p>Asymptotic analysis refers to computing the running time of any operation in mathematical units of computation. For example, the running time of one operation is computed as <em>f</em>(n) and may be for another operation it is computed as <em>g</em>(n<sup>2</sup>). This means the first operation running time will increase linearly with the increase in <strong>n</strong> and the running time of the second operation will increase exponentially when <strong>n</strong> increases. Similarly, the running time of both operations will be nearly the same if <strong>n</strong> is significantly small.</p>\r\n<p>Usually, the time required by an algorithm falls under three types &minus;</p>\r\n<ul class="list">\r\n<li>\r\n<p><strong>Best Case</strong> &minus; Minimum time required for program execution.</p>\r\n</li>\r\n<li>\r\n<p><strong>Average Case</strong> &minus; Average time required for program execution.</p>\r\n</li>\r\n<li>\r\n<p><strong>Worst Case</strong> &minus; Maximum time required for program execution.</p>\r\n</li>\r\n</ul>\r\n<h2>Asymptotic Notations</h2>\r\n<p>Following are the commonly used asymptotic notations to calculate the running time complexity of an algorithm.</p>\r\n<ul class="list">\r\n<li>&Omicron; Notation</li>\r\n<li>&Omega; Notation</li>\r\n<li>&theta; Notation</li>\r\n</ul>\r\n<h3>Big Oh Notation, &Omicron;</h3>\r\n<p>The notation &Omicron;(n) is the formal way to express the upper bound of an algorithm''s running time. It measures the worst case time complexity or the longest amount of time an algorithm can possibly take to complete.</p>\r\n<p><img src="https://www.tutorialspoint.com/data_structures_algorithms/images/big_o_notation.jpg" alt="Big O Notation" /></p>\r\n<p>For example, for a function <strong><em>f</em>(n)</strong></p>\r\n<pre class="result notranslate">&Omicron;(<em>f</em>(n)) = { <em>g</em>(n) : there exists c &gt; 0 and n</pre>\r\n<p><sub>0</sub></p>\r\n<pre class="result notranslate"> such that <em>f</em>(n) &le; c.<em>g</em>(n) for all n &gt; n</pre>\r\n<p><sub>0</sub></p>\r\n<pre class="result notranslate">. }\r\n</pre>\r\n<h3>Omega Notation, &Omega;</h3>\r\n<p>The notation &Omega;(n) is the formal way to express the lower bound of an algorithm''s running time. It measures the best case time complexity or the best amount of time an algorithm can possibly take to complete.</p>\r\n<p><img src="https://www.tutorialspoint.com/data_structures_algorithms/images/omega_notation.jpg" alt="Omega Notation" /></p>\r\n<p>For example, for a function <strong><em>f</em>(n)</strong></p>\r\n<pre class="result notranslate">&Omega;(<em>f</em>(n)) &ge; { <em>g</em>(n) : there exists c &gt; 0 and n</pre>\r\n<p><sub>0</sub></p>\r\n<pre class="result notranslate"> such that <em>g</em>(n) &le; c.<em>f</em>(n) for all n &gt; n</pre>\r\n<p><sub>0</sub></p>\r\n<pre class="result notranslate">. }\r\n</pre>\r\n<h3>Theta Notation, &theta;</h3>\r\n<p>The notation &theta;(n) is the formal way to express both the lower bound and the upper bound of an algorithm''s running time. It is represented as follows &minus;</p>\r\n<p><img src="https://www.tutorialspoint.com/data_structures_algorithms/images/theta_notation.jpg" alt="Theta Notation" /></p>\r\n<pre class="result notranslate">&theta;(<em>f</em>(n)) = { <em>g</em>(n) if and only if <em>g</em>(n) =  &Omicron;(<em>f</em>(n)) and <em>g</em>(n) = &Omega;(<em>f</em>(n)) for all n &gt; n</pre>\r\n<p><sub>0</sub></p>\r\n<pre class="result notranslate">. }\r\n</pre>\r\n<h2>Common Asymptotic Notations</h2>\r\n<p>Following is a list of some common asymptotic notations &minus;</p>\r\n<table class="table table-bordered" style="text-align: center;">\r\n<tbody>\r\n<tr>\r\n<td>constant</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(1)</td>\r\n</tr>\r\n<tr>\r\n<td>logarithmic</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(log n)</td>\r\n</tr>\r\n<tr>\r\n<td>linear</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(n)</td>\r\n</tr>\r\n<tr>\r\n<td>n log n</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(n log n)</td>\r\n</tr>\r\n<tr>\r\n<td>quadratic</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(n<sup>2</sup>)</td>\r\n</tr>\r\n<tr>\r\n<td>cubic</td>\r\n<td>&minus;</td>\r\n<td>&Omicron;(n<sup>3</sup>)</td>\r\n</tr>\r\n<tr>\r\n<td>polynomial</td>\r\n<td>&minus;</td>\r\n<td>n<sup>&Omicron;(1)</sup></td>\r\n</tr>\r\n<tr>\r\n<td>exponential</td>\r\n<td>&minus;</td>\r\n<td>2<sup>&Omicron;(n)</sup></td>\r\n</tr>\r\n</tbody>\r\n</table>', 'upload/e5178159a1.png', 'Mohammod Al Emran', 'Algorithms, Programming', '2017-03-24 10:55:36'),
(20, 19, 'Introduction to Elixir', '<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications. Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.</p>\r\n<p>Elixir is a functional, dynamic language built on top of Erlang and the Erlang VM. Erlang is a language that was originally written in 1986 by Ericsson to help solve telephony problems like distribution, fault-tolerance, and concurrency. Elixir, written by Jos&eacute; Valim, extends Erlang and provides a friendlier syntax into the Erlang VM. It does this while keeping the performance of the same level as Erlang.</p>\r\n<p>Some features of Elixir:</p>\r\n<ol>\r\n<li><strong>Scalability</strong>\r\n<p>All Elixir code runs inside lightweight processes that are isolated and exchange information via messages.</p>\r\n</li>\r\n<li><strong>Fault Tolerance</strong>\r\n<p>Elixir provides supervisors which describe how to restart parts of your system when things go wrong, going back to a known initial state that is guaranteed to work. This ensures your application/platform is never down.</p>\r\n</li>\r\n<li><strong>Functional Programming</strong>\r\n<p>Functional programming promotes a coding style that helps developers write code that is short, fast, and maintainable.</p>\r\n</li>\r\n<li><strong>Build tools</strong>\r\n<p>Elixir ships with a set of development tools. Mix is one such tools that makes it easy to create projects, manage tasks, run tests, etc. It also has its own package manager - Hex.</p>\r\n</li>\r\n<li><strong>Erlang Compatibility</strong>\r\n<p>Elixir runs on the Erlang VM giving developers complete access to Erlang&rsquo;s ecosystem.</p>\r\n</li>\r\n</ol>', 'upload/7f11000fd0.jpg', 'Mohammod Al Emran', 'Elixir,Programming', '2017-03-24 10:57:23'),
(21, 2, 'Intro to Codelgniter', '<p>CodeIgniter is an application development framework, which can be used to develop websites, using PHP. It is an Open Source framework. It has a very rich set of functionality, which will increase the speed of website development work.</p>\r\n<p>If you know PHP well, then CodeIgniter will make your task easier. It has a very rich set of libraries and helpers. By using CodeIgniter, you will save a lot of time, if you are developing a website from scratch. Not only that, a website built in CodeIgniter is secure too, as it has the ability to prevent various attacks that take place through websites.</p>\r\n<h2>CodeIgniter Features</h2>\r\n<p>Some of the important features of CodeIgniter are listed below &minus;</p>\r\n<ul class="list">\r\n<li>\r\n<p>Model-View-Controller Based System</p>\r\n</li>\r\n<li>\r\n<p>Extremely Light Weight</p>\r\n</li>\r\n<li>\r\n<p>Full Featured database classes with support for several platforms.</p>\r\n</li>\r\n<li>\r\n<p>Query Builder Database Support</p>\r\n</li>\r\n<li>\r\n<p>Form and Data Validation</p>\r\n</li>\r\n<li>\r\n<p>Security and XSS Filtering</p>\r\n</li>\r\n<li>\r\n<p>Session Management</p>\r\n</li>\r\n<li>\r\n<p>Email Sending Class. Supports Attachments, HTML/Text email, multiple protocols (sendmail, SMTP, and Mail) and more.</p>\r\n</li>\r\n<li>\r\n<p>Image Manipulation Library (cropping, resizing, rotating, etc.). Supports GD, ImageMagick, and NetPBM</p>\r\n</li>\r\n<li>\r\n<p>File Uploading Class</p>\r\n</li>\r\n<li>\r\n<p>FTP Class</p>\r\n</li>\r\n<li>\r\n<p>Localization</p>\r\n</li>\r\n<li>\r\n<p>Pagination</p>\r\n</li>\r\n<li>\r\n<p>Data Encryption</p>\r\n</li>\r\n<li>\r\n<p>Benchmarking</p>\r\n</li>\r\n<li>\r\n<p>Full Page Caching</p>\r\n</li>\r\n<li>\r\n<p>Error Logging</p>\r\n</li>\r\n<li>\r\n<p>Application Profiling</p>\r\n</li>\r\n<li>\r\n<p>Calendaring Class</p>\r\n</li>\r\n<li>\r\n<p>User Agent Class</p>\r\n</li>\r\n<li>\r\n<p>Zip Encoding Class</p>\r\n</li>\r\n<li>\r\n<p>Template Engine Class</p>\r\n</li>\r\n<li>\r\n<p>Trackback Class</p>\r\n</li>\r\n<li>\r\n<p>XML-RPC Library</p>\r\n</li>\r\n<li>\r\n<p>Unit Testing Class</p>\r\n</li>\r\n<li>\r\n<p>Search-engine Friendly URLs</p>\r\n</li>\r\n<li>\r\n<p>Flexible URI Routing</p>\r\n</li>\r\n<li>\r\n<p>Support for Hooks and Class Extensions</p>\r\n</li>\r\n<li>\r\n<p>Large library of &ldquo;helper&rdquo; functions</p>\r\n</li>\r\n</ul>', 'upload/2c2de57640.png', 'Mohammod Al Emran', 'PHP,Framework,codelgniter', '2017-03-24 11:02:45'),
(22, 12, 'What is Big Data', '<p>Due to the advent of new technologies, devices, and communication means like social networking sites, the amount of data produced by mankind is growing rapidly every year. The amount of data produced by us from the beginning of time till 2003 was 5 billion gigabytes. If you pile up the data in the form of disks it may fill an entire football field. The same amount was created in every two days in 2011, and in every ten minutes in 2013. This rate is still growing enormously. Though all this information produced is meaningful and can be useful when processed, it is being neglected.</p>\r\n<blockquote>90% of the world&rsquo;s data was generated in the last few years.</blockquote>\r\n<h2>What is Big Data?</h2>\r\n<p>Big data means really a big data, it is a collection of large datasets that cannot be processed using traditional computing techniques. Big data is not merely a data, rather it has become a complete subject, which involves various tools, technqiues and frameworks.</p>\r\n<h2>What Comes Under Big Data?</h2>\r\n<p>Big data involves the data produced by different devices and applications. Given below are some of the fields that come under the umbrella of Big Data.</p>\r\n<ul class="list">\r\n<li>\r\n<p><strong>Black Box Data</strong> : It is a component of helicopter, airplanes, and jets, etc. It captures voices of the flight crew, recordings of microphones and earphones, and the performance information of the aircraft.</p>\r\n</li>\r\n<li>\r\n<p><strong>Social Media Data</strong> : Social media such as Facebook and Twitter hold information and the views posted by millions of people across the globe.</p>\r\n</li>\r\n<li>\r\n<p><strong>Stock Exchange Data</strong> : The stock exchange data holds information about the &lsquo;buy&rsquo; and &lsquo;sell&rsquo; decisions made on a share of different companies made by the customers.</p>\r\n</li>\r\n<li>\r\n<p><strong>Power Grid Data</strong> : The power grid data holds information consumed by a particular node with respect to a base station.</p>\r\n</li>\r\n<li>\r\n<p><strong>Transport Data</strong> : Transport data includes model, capacity, distance and availability of a vehicle.</p>\r\n</li>\r\n<li>\r\n<p><strong>Search Engine Data</strong> : Search engines retrieve lots of data from different databases.</p>\r\n</li>\r\n</ul>\r\n<p><img src="https://www.tutorialspoint.com/hadoop/images/big_data.jpg" alt="Big Data" /></p>\r\n<p>Thus Big Data includes huge volume, high velocity, and extensible variety of data. The data in it will be of three types.</p>\r\n<ul class="list">\r\n<li>\r\n<p><strong>Structured data</strong> : Relational data.</p>\r\n</li>\r\n<li>\r\n<p><strong>Semi Structured data</strong> : XML data.</p>\r\n</li>\r\n<li>\r\n<p><strong>Unstructured data</strong> : Word, PDF, Text, Media Logs.</p>\r\n</li>\r\n</ul>\r\n<h2>Benefits of Big Data</h2>\r\n<p>Big data is really critical to our life and its emerging as one of the most important technologies in modern world. Follow are just few benefits which are very much known to all of us:</p>\r\n<ul class="list">\r\n<li>\r\n<p>Using the information kept in the social network like Facebook, the marketing agencies are learning about the response for their campaigns, promotions, and other advertising mediums.</p>\r\n</li>\r\n<li>\r\n<p>Using the information in the social media like preferences and product perception of their consumers, product companies and retail organizations are planning their production.</p>\r\n</li>\r\n<li>\r\n<p>Using the data regarding the previous medical history of patients, hospitals are providing better and quick service.</p>\r\n</li>\r\n</ul>\r\n<h2>Big Data Technologies</h2>\r\n<p>Big data technologies are important in providing more accurate analysis, which may lead to more concrete decision-making resulting in greater operational efficiencies, cost reductions, and reduced risks for the business.</p>\r\n<p>To harness the power of big data, you would require an infrastructure that can manage and process huge volumes of structured and unstructured data in realtime and can protect data privacy and security.</p>\r\n<p>There are various technologies in the market from different vendors including Amazon, IBM, Microsoft, etc., to handle big data. While looking into the technologies that handle big data, we examine the following two classes of technology:</p>\r\n<h3>Operational Big Data</h3>\r\n<p>This include systems like MongoDB that provide operational capabilities for real-time, interactive workloads where data is primarily captured and stored.</p>\r\n<p>NoSQL Big Data systems are designed to take advantage of new cloud computing architectures that have emerged over the past decade to allow massive computations to be run inexpensively and efficiently. This makes operational big data workloads much easier to manage, cheaper, and faster to implement.</p>\r\n<p>Some NoSQL systems can provide insights into patterns and trends based on real-time data with minimal coding and without the need for data scientists and additional infrastructure.</p>\r\n<h3>Analytical Big Data</h3>\r\n<p>This includes systems like Massively Parallel Processing (MPP) database systems and MapReduce that provide analytical capabilities for retrospective and complex analysis that may touch most or all of the data.</p>\r\n<p>MapReduce provides a new method of analyzing data that is complementary to the capabilities provided by SQL, and a system based on MapReduce that can be scaled up from single servers to thousands of high and low end machines.</p>\r\n<p>These two classes of technology are complementary and frequently deployed together.</p>\r\n<h2>Operational vs. Analytical Systems</h2>\r\n<table class="table table-bordered">\r\n<tbody>\r\n<tr><th>&nbsp;</th><th>Operational</th><th>Analytical</th></tr>\r\n<tr>\r\n<td>Latency</td>\r\n<td>1 ms - 100 ms</td>\r\n<td>1 min - 100 min</td>\r\n</tr>\r\n<tr>\r\n<td>Concurrency</td>\r\n<td>1000 - 100,000</td>\r\n<td>1 - 10</td>\r\n</tr>\r\n<tr>\r\n<td>Access Pattern</td>\r\n<td>Writes and Reads</td>\r\n<td>Reads</td>\r\n</tr>\r\n<tr>\r\n<td>Queries</td>\r\n<td>Selective</td>\r\n<td>Unselective</td>\r\n</tr>\r\n<tr>\r\n<td>Data Scope</td>\r\n<td>Operational</td>\r\n<td>Retrospective</td>\r\n</tr>\r\n<tr>\r\n<td>End User</td>\r\n<td>Customer</td>\r\n<td>Data Scientist</td>\r\n</tr>\r\n<tr>\r\n<td>Technology</td>\r\n<td>NoSQL</td>\r\n<td>MapReduce, MPP Database</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2>Big Data Challenges</h2>\r\n<p>The major challenges associated with big data are as follows:</p>\r\n<ul class="list">\r\n<li>Capturing data</li>\r\n<li>Curation</li>\r\n<li>Storage</li>\r\n<li>Searching</li>\r\n<li>Sharing</li>\r\n<li>Transfer</li>\r\n<li>Analysis</li>\r\n<li>Presentation</li>\r\n</ul>\r\n<p>To fulfill the above challenges, organizations normally take the help of enterprise servers.</p>', 'upload/e3b672d2f4.jpg', 'Mohammod Al Emran', 'Big data', '2017-03-24 11:06:21');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_social`
--

CREATE TABLE `tbl_social` (
  `id` int(11) NOT NULL,
  `fb` varchar(255) NOT NULL,
  `tw` varchar(255) NOT NULL,
  `ln` varchar(255) NOT NULL,
  `gp` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_social`
--

INSERT INTO `tbl_social` (`id`, `fb`, `tw`, `ln`, `gp`) VALUES
(1, 'https://facebook.com/imran', 'https://twitter.com/imran', 'https://linkedin.com/imran', 'https://plus.google.com/imran');

-- --------------------------------------------------------

--
-- Table structure for table `tbl_user`
--

CREATE TABLE `tbl_user` (
  `id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `username` varchar(50) NOT NULL,
  `password` varchar(32) NOT NULL,
  `email` varchar(255) NOT NULL,
  `details` text NOT NULL,
  `role` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `tbl_user`
--

INSERT INTO `tbl_user` (`id`, `name`, `username`, `password`, `email`, `details`, `role`) VALUES
(4, '', 'admin', '5aee9dbd2a188839105073571bee1b1f', '', '', 2),
(6, 'Imran', 'mohammodalemran', 'imraanBracu', '', '', 0),
(7, 'mae', 'mae', 'imraanBracu', 'imraan@gmail.com', 'Hi Imran', 1),
(8, 'editor', 'editor', '202cb962ac59075b964b07152d234b70', 'imraan@gmail.com', 'Hii', 1);

-- --------------------------------------------------------

--
-- Table structure for table `title_slogan`
--

CREATE TABLE `title_slogan` (
  `id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `slogan` varchar(255) NOT NULL,
  `logo` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `title_slogan`
--

INSERT INTO `title_slogan` (`id`, `title`, `slogan`, `logo`) VALUES
(1, 'CSE370', 'Our Slogan', 'upload/logo.png');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `tbl_catagory`
--
ALTER TABLE `tbl_catagory`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_page`
--
ALTER TABLE `tbl_page`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_post`
--
ALTER TABLE `tbl_post`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_social`
--
ALTER TABLE `tbl_social`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `tbl_user`
--
ALTER TABLE `tbl_user`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `title_slogan`
--
ALTER TABLE `title_slogan`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `tbl_catagory`
--
ALTER TABLE `tbl_catagory`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;
--
-- AUTO_INCREMENT for table `tbl_page`
--
ALTER TABLE `tbl_page`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;
--
-- AUTO_INCREMENT for table `tbl_post`
--
ALTER TABLE `tbl_post`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=23;
--
-- AUTO_INCREMENT for table `tbl_social`
--
ALTER TABLE `tbl_social`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
--
-- AUTO_INCREMENT for table `tbl_user`
--
ALTER TABLE `tbl_user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;
--
-- AUTO_INCREMENT for table `title_slogan`
--
ALTER TABLE `title_slogan`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
